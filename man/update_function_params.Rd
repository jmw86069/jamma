% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jam-update-fn-params.R
\name{update_function_params}
\alias{update_function_params}
\title{Update function default parameters}
\usage{
update_function_params(
  function_name = NULL,
  param_name = NULL,
  new_values = NULL,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{function_name}{\code{function} or \code{character} string referring to
the name of a function, passed to \code{formals()}.}

\item{param_name}{\code{character} string of the argument/parameter name
in \code{formals()} of the \code{function_name}.}

\item{new_values}{\code{list} or named vector used to update or augment
existing default argument values defined for \code{param_name} of
\code{formals()} of \code{function_name}.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}
}
\description{
Update function default parameters
}
\details{
This function is a minor extension to \code{update_list_elements()}
intended to help update function parameters which are defined
as a nested list. See examples.

The main utility is for a function that defines a full set of
required argument values, where the user calling the function
may want to modify onyl a subset of those default values.
}
\examples{
# function uses y as passed to the function
test_function_1 <- function(y=list(a=1, b=4)) {
   print("y:");
   print(y);
}
test_function_1(y=list(b=5, d=1:5))

# function starts with y formals, adds or updates new values
test_function_2 <- function(y=list(a=1, b=4)) {
   y <- update_function_params(test_function,
      param_name="y",
      new_values=y);
   print("y:");
   print(y);
}
test_function_2(y=list(b=5:6, d=1:5))

}
\seealso{
Other jam utilities: 
\code{\link{update_list_elements}()}
}
\concept{jam utilities}
